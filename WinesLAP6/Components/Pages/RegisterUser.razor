@page "/register"

@inject UserService UserService
@inject AuthService AuthService
@inject NavigationManager NavManager

<h3>Register</h3>
<Messages Message="@Message"/>

<div>
	<InputField Label="Username"
		@bind-Value="UserName"
		PlaceHolder="Enter username here">
	</InputField>
	<InputField Label="Password"
				@bind-Value="Password"
				PlaceHolder="Enter password here"
				IsPassword = "true"
				ShowPassword="@ShowPassword">
	</InputField>
	<InputField Label="Confirm password"
				@bind-Value="ConfirmPassword"
				PlaceHolder="Confirm password here"
				IsPassword="true"
				ShowPassword="@ShowPassword">
	</InputField>
	<div>
		<InputCheckbox @bind-Value=@ShowPassword></InputCheckbox>
		<label>Show password</label>
	</div>
	<div>
		<button @onclick="Register">Register</button>
	</div>
</div>

@code {
	private string UserName = string.Empty;
	private string Password = string.Empty;
	private string ConfirmPassword = string.Empty;
	private string Message = string.Empty;
	private bool ShowPassword = false;

	private async Task Register()
	{
		if (string.IsNullOrEmpty(UserName) || string.IsNullOrEmpty(Password))
		{
			Message = "Please fill out username and password";
			return;
		}

		if(Password != ConfirmPassword)
		{
			Message = "Passwords don't match.";
			return;
		}

		if (await UserService.UserAlreadyExists(UserName))
		{
			Message = "User already exists";
			return;
		}

		var user = new User
			{
				UserName = UserName
			};

			var salt = AuthService.GetSaltOfGuid(user.UserId);

			user.PasswordHash = AuthService.GetPasswordHash(Password, salt);

			await UserService.AddUserAsync(user);

			Message = "User registered successful";

			NavManager.NavigateTo($"/login");
	}
}
